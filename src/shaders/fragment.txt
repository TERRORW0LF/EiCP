#version 460 core

// Inputs from the vertex shader.
in vec3 fragment_color;
in vec3 fragment_pos;
in vec3 fragment_norm;

// Pixel color output.
out vec4 screen_color;

// Inputs for lighting. Set once per frame.
layout(location = 6) uniform vec3 camera_pos;
layout(location = 7) uniform vec3 light_pos;
layout(location = 8) uniform vec3 light_color;
layout(location = 9) uniform float ambient_strength;
layout(location = 10) uniform float specular_strength;

void main()
{
    // Ambient lighting. The base light every object receives.
    vec3 ambient = ambient_strength * light_color;

    // Diffusion lighting. Highlights spots that are in the
    // direction of the active light source.
    vec3 norm = normalize(fragment_norm);
    // Set light direction. Since our normals point outwards
    // of the object, this vector needs to point from the object
    // to the light source.
    vec3 light_dir = normalize(light_pos - fragment_pos);
    // Determine the light strength hitting the surface.
    float diff = max(dot(norm, light_dir), 0.0);
    vec3 diffuse = diff * light_color;

    // Specular lighting. Hightlights spots whose reflection ray
    // passes by the camera closely.
    vec3 view_dir = normalize(camera_pos - fragment_pos);
    // The reflect function needs the light direction to go from
    // the light source to the object.
    vec3 reflect_dir = reflect(-light_dir, norm);
    // Get how close reflection and viewing direction are to each other
    // and exponentiate it to create a small highlight.
    float spec = pow(max(dot(view_dir, reflect_dir), 0.0), 32);
    vec3 specular = specular_strength * spec * light_color;

    // Add ambient, diffusion, and specular lighting together and
    // shade the pixel.
    vec3 result = (ambient + diffuse + specular) * fragment_color;
    screen_color = vec4(result, 1.0);
}