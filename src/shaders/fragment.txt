#version 460 core

// Inputs from the vertex shader.
in vec3 fragmentColor;
in vec3 fragmentPos;
in vec3 fragmentNorm;

// Pixel color output.
out vec4 screenColor;

// Inputs for lighting. Set once per frame.
layout(location = 6) uniform vec3 lightPos;
layout(location = 7) uniform vec3 lightColor;
layout(location = 8) uniform float ambientStrength;

void main()
{
    // Ambient lighting. The base light every object receives.
    vec3 ambient = ambientStrength * lightColor;

    // Diffusion lighting. Highlights spots that are in the
    // direction of the active light source.
    vec3 norm = normalize(fragmentNorm);
    // Set light direction. Since our normals point outwards
    // of the object, this vector needs to point from the object
    // to the light source.
    vec3 lightDir = normalize(lightPos - fragmentPos);
    // Determine the light strength hitting the surface.
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;

    // Add ambient and diffusion lighting together and
    // shade the pixel.
    vec3 result = (ambient + diffuse) * fragmentColor;
    screenColor = vec4(result, 1.0);
}